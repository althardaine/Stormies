@{
    ViewBag.Title = "Game";
}
<h2 id ="yourName">Stormies!!!</h2>
<div class="container">
    <input type="text" id="playerName" />
    <input type="button" id="joinGame" value="Join" />
    <ul id="players"></ul>
</div>

<div id="game-area"></div>

@section scripts {
    <script src="../../Scripts/jquery.signalR-2.2.0.min.js"></script>
    <script src="../../Scripts/phaser.js"></script>
    <script src="/signalr/hubs"></script>

    <script type="text/javascript">

    $(function () {

        window.onload = function () {

            var gameHub = $.connection.gameHub;
            var gameArea = new Phaser.Game(800, 600, Phaser.AUTO, 'phaser-example', { preload: preload, create: create, update: update });

            function preload() {

                gameArea.load.tilemap('stormies', '../../Map/StormiesMap.json', null, Phaser.Tilemap.TILED_JSON);
                gameArea.load.image('tiles', '../../Tiles/stormies.png');
                gameArea.load.image('player', '../../Tiles/player.png');

            }

            var map;
            var layer;
            var cursors;
            var players = {};

            function create() {
                gameArea.stage.backgroundColor = '#787878';
                map = gameArea.add.tilemap('stormies');
                map.addTilesetImage('StormiesTiles', 'tiles');
                layer = map.createLayer('World1');
                layer.resizeWorld();
                layer.wrap = true;

                cursors = gameArea.input.keyboard.createCursorKeys();
            }

            function update() {

                if ('@Request.UserHostAddress' in players) {
                    var player = players['@Request.UserHostAddress'];

                    gameArea.physics.arcade.enable(player);
                    player.body.velocity.x = 0;
                    player.body.velocity.y = 0;

                    if (cursors.left.isDown || cursors.right.isDown || cursors.up.isDown || cursors.down.isDown) {
                        if (cursors.left.isDown) {
                            player.x = player.x - 10;
                        } else if (cursors.right.isDown) {
                            player.x = player.x + 10;
                        }
                        if (cursors.up.isDown) {
                            player.y = player.y - 10;
                        } else if (cursors.down.isDown) {
                            player.y = player.y + 10;
                        }
                        gameHub.client.playerMoved('@Request.UserHostAddress', player.x, player.y);
                    }
                }
            }

            gameHub.client.youJoined = function (gameState) {
                $('#yourName').append(htmlEncode("Stormies!!!"));
                for (var playerIp in gameState.Players) {
                    if (playerIp === '@Request.UserHostAddress') {
                        $('#yourName').append(htmlEncode(" Hello " + gameState.Players[playerIp].Name) +
                            " Health: " + gameState.Players[playerIp].Health);
                    }
                    players[playerIp] = gameArea.add.sprite(32, 32, 'player');
                    $('#players').append('<li>' + htmlEncode(gameState.Players[playerIp].Name) + " " + htmlEncode(playerIp) + '</li>');
                };
            };

            gameHub.client.playerJoined = function (playerName, playerIp) {
                $('#players').append('<li>' + htmlEncode(playerName + " " + playerIp) + '</li>');
                players[playerIp] = gameArea.add.sprite(32, 32, 'player');
            }

            gameHub.client.playerLeft = function (gameState, ip) {
                $('#players').empty();
                for (var playerIp in gameState.Players) {
                    $('#players').append('<li>' + htmlEncode(gameState.Players[playerIp].Name) + " " + htmlEncode(playerIp) + '</li>');
                };
                players[ip].destroy();
                delete players[ip];
            };

            gameHub.client.passErrorMessage = function (message) {
                alert(message);
            };

            gameHub.client.playerMoved = function (playerIp, x, y) {
                players[playerIp].x = x;
                players[playerIp].y = y;
            }

            $.connection.hub.start().done(function () {
                $('#joinGame').click(function () {
                    gameHub.server.joinRequest($('#playerName').val(), '@Request.UserHostAddress');
                });
                $(window).bind('beforeunload', function () {
                    gameHub.server.leaveRequest('@Request.UserHostAddress');
                });
                $(document).keypress(function (e) {
                    if (e.which === 49) {
                        gameHub.server.firstSkillUsed('@Request.UserHostAddress');
                    }
                });
            });
        }

    });

    function htmlEncode(value) {
        var encodedValue = $('<div />').text(value).html();
        return encodedValue;
    }
</script>
}